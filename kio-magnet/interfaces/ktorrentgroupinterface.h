/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp interfaces/org.ktorrent.group.xml -c KTorrentGroupInterface -p ktorrentgroupinterface
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KTORRENTGROUPINTERFACE_H_1283368955
#define KTORRENTGROUPINTERFACE_H_1283368955

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.ktorrent.group
 */
class KTorrentGroupInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.ktorrent.group"; }

public:
    KTorrentGroupInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~KTorrentGroupInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> defaultSaveLocation()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("defaultSaveLocation"), argumentList);
    }

    inline QDBusPendingReply<QString> icon()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("icon"), argumentList);
    }

    inline QDBusPendingReply<uint> maxDownloadSpeed()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("maxDownloadSpeed"), argumentList);
    }

    inline QDBusPendingReply<double> maxSeedTime()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("maxSeedTime"), argumentList);
    }

    inline QDBusPendingReply<double> maxShareRatio()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("maxShareRatio"), argumentList);
    }

    inline QDBusPendingReply<uint> maxUploadSpeed()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("maxUploadSpeed"), argumentList);
    }

    inline QDBusPendingReply<QString> name()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("name"), argumentList);
    }

    inline QDBusPendingReply<bool> onlyApplyOnNewTorrents()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("onlyApplyOnNewTorrents"), argumentList);
    }

    inline QDBusPendingReply<> setDefaultSaveLocation(const QString &dir)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(dir);
        return asyncCallWithArgumentList(QLatin1String("setDefaultSaveLocation"), argumentList);
    }

    inline QDBusPendingReply<> setMaxDownloadSpeed(uint speed)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(speed);
        return asyncCallWithArgumentList(QLatin1String("setMaxDownloadSpeed"), argumentList);
    }

    inline QDBusPendingReply<> setMaxSeedTime(double hours)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(hours);
        return asyncCallWithArgumentList(QLatin1String("setMaxSeedTime"), argumentList);
    }

    inline QDBusPendingReply<> setMaxShareRatio(double ratio)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(ratio);
        return asyncCallWithArgumentList(QLatin1String("setMaxShareRatio"), argumentList);
    }

    inline QDBusPendingReply<> setMaxUploadSpeed(uint speed)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(speed);
        return asyncCallWithArgumentList(QLatin1String("setMaxUploadSpeed"), argumentList);
    }

    inline QDBusPendingReply<> setOnlyApplyOnNewTorrents(bool on)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(on);
        return asyncCallWithArgumentList(QLatin1String("setOnlyApplyOnNewTorrents"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace ktorrent {
    typedef ::KTorrentGroupInterface group;
  }
}
#endif
